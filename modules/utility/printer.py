import sys

from modules.utility.colorizer import Color, colorize


def info(msg: str) -> None:
    print(f'    {colorize(Color.INFO, "Info:")}', msg, file=sys.stderr)


def hint(msg: str) -> None:
    print(f'    {colorize(Color.HINT, "Hint:")}', msg, file=sys.stderr)


def progress(msg: str) -> None:
    print('Progress:', msg, file=sys.stderr)


def warning(msg: str) -> None:
    print(f' {colorize(Color.WARNING, "Warning:")}', msg, file=sys.stderr)


def error(msg: str) -> None:
    print(f'   {colorize(Color.ERROR, "Error:")}', msg, file=sys.stderr)


def usage() -> None:
    print('''
Usage:
    1. {} {} [{}]...
    2. {} {} <{}> [{}] [{}]...

Description:
    1. Generate test cases.
    2. Generate test cases and feed them to provided program(s) as inputs to run tests.

Option:
    {}, {}  Following this, provide a file name that specifies the format of the test case.
                 If ommited, the input is read from standard input.

    {}, {}  Following this, provide the prefix of the name of test cases to be saved.
    {}, {}  Following this, provide the suffix of the name of test cases to be saved.
                  By default, test cases are saved with sequentially numbered names starting with 1.
                  You can prefix and/or suffix to their names by specifying these options.

    {}, {}  Following this, provide the number of test cases to be generated.
                 If ommited, 1 test case will be generated by the gen command, and
                 2000 test cases will be generated by the test command.

    {}, {}  Following this, provide the maximum execution time of each test in seconds.
                      If ommited, the maximum execution time of each test will be 2 seconds.

    {}, {}  If specified, the progress bar output will be suppressed.
                           This option takes no additional arguments.

Example:
    {} {}
    Generate 1000 test cases in the test_case directory from fmt.txt.

    {} {}
    Generate 2000 test cases (which is default) from vars.txt
    and give them as input to ./a.out and ./naive.out to run tests.
'''.format(*map(lambda s: colorize(Color.CODE, s), (
        sys.argv[0], 'gen', 'options',
        sys.argv[0], 'test', 'program_1', 'program_2', 'options',
        '-i', '--input', '-p', '--prefix', '-s', '--suffix',
        '-c', '--cases', '-t', '--time-limit', '-n', '--no-progress-bar',
        sys.argv[0], 'gen -i fmt.txt -p test_case -c 1000',
        sys.argv[0], 'test ./a.out ./naive.out - i vars.txt'
    ))), file=sys.stderr)


def prompt() -> None:
    print(colorize(Color.PROMPT, '>>> '), end='', flush=True)


def progress_bar(done: int, total: int, length: int) -> None:
    print(f'  {done*100//total:3}% [', end='')
    for i in range(length):
        print(colorize(Color.DONE, '#') if (i <= done*length//total) else '.', end='')
    print(']', end='\r')
